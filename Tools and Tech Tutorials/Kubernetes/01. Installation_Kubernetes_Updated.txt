# Kubernetes 1.31 Installation Guide for Ubuntu 20.04 LTS

## 1. Prerequisites
### Node Configuration
Example node IP addresses:
192.168.0.183 - master01
192.168.0.175 - worker01
192.168.0.139 - worker02

### Static IP Configuration
```bash
# Edit netplan configuration
sudo nano /etc/netplan/00-installer-config.yaml
```

Add the following content (adjust IP addresses to match your setup):
```yaml
# This is the network config written by 'subiquity'
network:
  version: 2
  ethernets:
    ens33:
      dhcp4: no
      addresses:
        - 192.168.0.175/24
      routes:
        - to: default
          via: 192.168.0.1
      nameservers:
        addresses:
          - 8.8.8.8
          - 8.8.4.4
```

Apply the network configuration:
```bash
sudo netplan apply
```

### Set Hostnames
```bash
# On master node
sudo hostnamectl set-hostname master01

# On worker nodes
sudo hostnamectl set-hostname worker01  # First worker
sudo hostnamectl set-hostname worker02  # Second worker
```

### Update Host Files
```bash
sudo nano /etc/hosts
```

Add the following entries:
```
192.168.0.183 master01
192.168.0.175 worker01
192.168.0.139 worker02
```

### Verify Port Availability
Required ports for master node:
- 6443/TCP: Kubernetes API server
- 2379-2380/TCP: etcd server client API
- 10250/TCP: Kubelet API
- 10259/TCP: kube-scheduler
- 10257/TCP: kube-controller-manager

Required ports for worker nodes:
- 10250/TCP: Kubelet API
- 10256/TCP: kube-proxy
- 30000-32767/TCP: NodePort Services

Check port availability:
```bash
sudo apt-get update
sudo apt-get install -y netcat
nc 127.0.0.1 6443 -zv -w 2
```

## 2. System Preparation

### Disable Swap
Kubernetes requires swap to be disabled:
```bash
# Disable swap immediately
sudo swapoff -a

# Disable swap permanently
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
```

### Enable IPv4 Forwarding
```bash
# Configure kernel parameters
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

# Apply kernel parameters
sudo sysctl --system

# Verify IPv4 forwarding is enabled
sysctl net.ipv4.ip_forward
```

## 3. Install Container Runtime (containerd)

### Configure prerequisites for containerd
```bash
# Load required modules
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter
```

### Install containerd
```bash
# Install dependencies
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

# Install containerd
sudo apt-get update
sudo apt-get install -y containerd

# Create default configuration
sudo mkdir -p /etc/containerd
sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null

# Set the cgroup driver to systemd
sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml

# Restart containerd
sudo systemctl restart containerd
sudo systemctl enable containerd
```

## 4. Install Kubernetes Components (v1.31)

### Add Kubernetes repository
```bash
# Create keyrings directory
sudo mkdir -p /etc/apt/keyrings

# Add Kubernetes signing key
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

# Add Kubernetes repository
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
```

### Install Kubernetes packages
```bash
# Update package lists
sudo apt-get update

# Install kubeadm, kubelet, and kubectl
sudo apt-get install -y kubelet kubeadm kubectl

# Pin their versions
sudo apt-mark hold kubelet kubeadm kubectl
```

## 5. Initialize Kubernetes Control Plane (Master Node Only)

### Initialize the cluster
```bash
# Pull required images
sudo kubeadm config images pull

# Initialize the control plane
sudo kubeadm init --pod-network-cidr=10.88.0.0/16
```

### Set up kubectl for the user
```bash
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
```

## 6. Install Container Network Interface (CNI) - Calico

### Install Calico
```bash
# Download the Calico manifest
curl https://raw.githubusercontent.com/projectcalico/calico/v3.29.3/manifests/calico.yaml -O

# Apply the manifest
kubectl apply -f calico.yaml
```

## 7. Join Worker Nodes to the Cluster

### Get the join command on the master node
```bash
# This command will display the kubeadm join command with token and hash
kubeadm token create --print-join-command
```

### Run the join command on each worker node
```bash
# Example (the actual command will be different):
sudo kubeadm join 192.168.0.183:6443 --token abcdef.1234567890abcdef \
    --discovery-token-ca-cert-hash sha256:1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
```

## 8. Verify the Cluster

```bash
# Check the node status
kubectl get nodes

# Check all pods in the system
kubectl get pods --all-namespaces
```

## 9. Configure kubectl Aliases and Completion (Optional)

### Update .bashrc
```bash
cat <<EOF >> ~/.bashrc
export KUBECONFIG=~/.kube/config
alias k='kubectl'
source <(kubectl completion bash)
complete -F __start_kubectl k
EOF

# Apply changes
source ~/.bashrc
```

## 10. Set up for root user (if needed)
```bash
sudo mkdir -p /root/.kube
sudo cp $HOME/.kube/config /root/.kube/config
sudo chown root:root /root/.kube/config
```

## 11. Troubleshooting

### View kubelet logs
```bash
journalctl --identifier kubelet
```

### Cgroup driver mismatch
If you get an error about the cgroup driver between kubelet and containerd, ensure the containerd config is set correctly:

```bash
# Check containerd config
sudo cat /etc/containerd/config.toml | grep SystemdCgroup

# It should show:
# SystemdCgroup = true
```

### Reset the Cluster
If you need to start over:
```bash
# On master node
sudo kubeadm reset
rm $HOME/.kube/config

# On worker nodes
sudo kubeadm reset
```

### Node Maintenance
```bash
# Drain a node for maintenance
sudo kubectl drain worker01 --ignore-daemonsets --delete-emptydir-data

# Return a node to service
sudo kubectl uncordon worker01
```
